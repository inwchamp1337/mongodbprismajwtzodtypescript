generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  username   String     @unique
  email      String     @unique
  password   String
  createdAt  DateTime   @default(now())

  // One-to-one relation: a user may have one profile
  profile    Profile?   @relation

  // One-to-many relations
  reviews    Review[]
  comments   Comment[]
  likes      Like[]
}

model Profile {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @unique @db.ObjectId
  fullName   String
  avatarUrl  String
  bio        String
  birthday   DateTime
  createdAt  DateTime   @default(now())

  // Define foreign-key side of the one-to-one relation
  user       User       @relation(fields: [userId], references: [id])
}

model Movie {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  releaseDate  DateTime
  genre        String

  reviews      Review[]
}

model Review {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  movieId      String     @db.ObjectId
  rating       Int
  content      String
  createdAt    DateTime   @default(now())

  user         User       @relation(fields: [userId], references: [id])
  movie        Movie      @relation(fields: [movieId], references: [id])
  comments     Comment[]
  likes        Like[]
}

model Comment {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  reviewId     String     @db.ObjectId
  userId       String     @db.ObjectId
  content      String
  createdAt    DateTime   @default(now())

  review       Review     @relation(fields: [reviewId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Like {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  reviewId     String     @db.ObjectId
  userId       String     @db.ObjectId
  createdAt    DateTime   @default(now())

  review       Review     @relation(fields: [reviewId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}
